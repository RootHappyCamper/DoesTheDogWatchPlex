import requests
import bs4
from plexapi.server import PlexServer

from config import token, url

plex = PlexServer(url, token)

write_description = "{base}/library/sections/{section_id}/all?type=1&id={id}&includeExternalMedia=1&summary.value={description}&X-Plex-Product=Plex%20Web&X-Plex-Version=3.99.2&X-Plex-Client-Identifier=7st8h2qhsuhd44mw2y8uanrs&X-Plex-Platform=Chrome&X-Plex-Platform-Version=76.0&X-Plex-Sync-Version=2&X-Plex-Model=hosted&X-Plex-Device=Windows&X-Plex-Device-Name=Chrome&X-Plex-Device-Screen-Resolution=1368x776%2C1368x912&X-Plex-Token={token}&X-Plex-Language=en"
def get_movie_libraries():
#    plex_library_list = plex.library.sections()
    plex_movie_library_ids = [int(str(section).split(':')[1]) for section in plex.library.sections() if "MovieSection" in str(section)]
    return plex_movie_library_ids

def get_movies(library_id):
    movie_list = []
    print("Requesting movies from {}".format(library_id))
    working_library = plex.library.sectionByID(library_id)
    for video in working_library.search():
        movie_list.append(video)
    return movie_list

def get_movies_and_format():
    movies = []
    has_tag_counter = 0
    movie_counter = 0
    for library in get_movie_libraries():
        for movie in get_movies(library):
#            working_movie = plex.library.sectionByID(library).get(movie)
            if "Content Warnings:" in movie.summary:
                has_tag = "True"
                has_tag_counter += 1
            else:
                has_tag = "False"
            movies.append(dict(library=library, key=movie.key, title=movie.title, desc=movie.summary, has_tag = has_tag))
            movie_counter += 1
    print("Grabbed " + str(movie_counter) + " movies from Plex. " + str(has_tag_counter) + " of them already have content warnings.")
    return movies


def write_data(movie):
    # the value movie should be structured like one generated by build_json.py
    desc_cut = movie['desc'].split("\r\n\r\nContent Warnings: \r\n\r\n")[0]
    statuses = []
    if len(movie['statuses']) == 0:
        ddtd_status = "No content warnings could be retrieved for this film\nThis means either this film is fine, or it isn't present on DTDD"
    else:
        for status in movie['statuses']:
            if status[1] == "Yes":
                statuses.append(status[2])
        statuses.sort()
        ddtd_status = "This may contain: {}".format(', '.join(statuses))

    movie['desc'] = "{}\r\n\r\nContent Warnings: \r\n\r\n{}".format(desc_cut, ddtd_status)
    
    movie['id']=movie['key'].strip('/library/metadata/')
    target = write_description.format(section_id=movie['library'], id=movie['id'], base=url, token=token, description=movie['desc'])
    response = requests.put(target)
    if response.status_code != 200:
        soup = bs4.BeautifulSoup(response.text, 'html.parser')
        cleaned_text = soup.get_text()
        print(f"Bad Request for movie: {movie['title']}, Error code {response.status_code}. Error Message: {cleaned_text}")

if __name__ == "__main__":
    # for testing only
    # show all movie libraries

    print("ðŸŽ¬ Film library IDs")
    for library in get_movie_libraries()[0]:
        print(library['key'])
